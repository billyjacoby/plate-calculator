{"version":3,"sources":["components/Plate.js","lib/plateCalculator.js","App.js","index.js"],"names":["Plate","weight","inventory","setPlateInventory","type","onClick","calculateWeights","desiredWeight","barWeight","plateInventory","parseInt","weightsNeeded","plates","closestWeight","Object","entries","sort","a","b","set","numPlates","Math","floor","push","plateWeight","qty","AppContainer","styled","div","InnerContainer","Form","form","PlateInventory","App","useState","setDesiredWeight","setBarWeight","results","setResults","45","35","25","10","5","2.5","clickCalculate","htmlFor","name","placeholder","value","onChange","e","target","style","display","flexDirection","alignItems","id","padding","default","disabled","map","plate","console","log","JSON","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4905666.chunk.js","sourcesContent":["const Plate = ({ weight, inventory, setPlateInventory }) => {\n  return (\n    <div>\n      <span>{weight}: </span>\n      <button\n        type=\"button\"\n        onClick={() =>\n          setPlateInventory({\n            ...inventory,\n            [weight]: inventory[weight] - 1,\n          })\n        }\n      >\n        -\n      </button>\n      <span>{inventory[weight]}</span>\n      <button\n        type=\"button\"\n        onClick={() =>\n          setPlateInventory({\n            ...inventory,\n            [weight]: inventory[weight] + 1,\n          })\n        }\n      >\n        +\n      </button>\n    </div>\n  );\n};\n\nexport default Plate;\n","function calculateWeights({ desiredWeight, barWeight, plateInventory }) {\n  desiredWeight = parseInt(desiredWeight, 10);\n  barWeight = parseInt(barWeight, 10);\n  if (desiredWeight - barWeight < 0) return false;\n  let weightsNeeded = {\n    plates: [],\n    closestWeight: 0,\n  };\n\n  let weight = desiredWeight - barWeight;\n  weightsNeeded.closestWeight = barWeight;\n  for (var set of Object.entries(plateInventory).sort((a, b) => {\n    if (parseInt(a[0]) < parseInt(b[0])) {\n      return 1;\n    } else {\n      return -1;\n    }\n  })) {\n    let numPlates = 2 * Math.floor(weight / set[0] / 2);\n    if (set[1] >= numPlates) {\n      // Only add to the array if the weights are needed\n      if (numPlates === 0) continue;\n      plateInventory[set[0]] -= numPlates;\n      weightsNeeded.plates.push({ plateWeight: set[0], qty: numPlates });\n      weightsNeeded.closestWeight += set[0] * numPlates;\n      weight -= set[0] * numPlates;\n    } else {\n      // TODO: Add logic here to only return an even number of plates\n      plateInventory[set[0]] = 0;\n      weightsNeeded.plates.push({ plateWeight: set[0], qty: set[1] });\n      weightsNeeded.closestWeight += set[0] * set[1];\n      weight -= set[0] * set[1];\n    }\n  }\n\n  return weightsNeeded;\n}\n\nexport default calculateWeights;\n// console.log(\n//   calculateWeights({\n//     desiredWeight: 185,\n//     barWeight: 45,\n//     plateInventory: { 5: 4, 45: 4, 35: 2, 25: 4, 10: 4, 2.5: 4 },\n//   })\n// );\n","import { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport \"../node_modules/normalize.css/normalize.css\";\n\nimport Plate from \"./components/Plate\";\nimport calculateWeights from \"./lib/plateCalculator\";\n\nconst AppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n  justify-content: center;\n`;\n\nconst InnerContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  & > * {\n    margin: 10px 0;\n  }\n`;\n\nconst PlateInventory = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nfunction App() {\n  const [desiredWeight, setDesiredWeight] = useState(\"\");\n  const [barWeight, setBarWeight] = useState(45);\n\n  const [results, setResults] = useState();\n\n  const [plateInventory, setPlateInventory] = useState({\n    45: 4,\n    35: 2,\n    25: 4,\n    10: 4,\n    5: 4,\n    2.5: 2,\n  });\n\n  function clickCalculate() {\n    setResults(\n      calculateWeights({\n        desiredWeight,\n        barWeight: barWeight || 0,\n        // Interesting that passing in the actual object here changes it\n        plateInventory: { ...plateInventory },\n      })\n    );\n  }\n\n  return (\n    <AppContainer>\n      <InnerContainer>\n        <header>\n          <h1>Plate Calculator</h1>\n          <p>get strong, not smart</p>\n        </header>\n        <Form>\n          <label htmlFor=\"desiredWeight\">\n            Enter Desired Weight:\n            <input\n              type=\"number\"\n              name=\"desiredWeight\"\n              placeholder=\"135\"\n              value={desiredWeight}\n              onChange={(e) => setDesiredWeight(e.target.value)}\n            />\n          </label>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n            }}\n          >\n            <label htmlFor=\"barWeight\"> Choose a weight: </label>\n            <select\n              name=\"barWeight\"\n              id=\"barWeight\"\n              style={{ padding: \"2px 10px\" }}\n              value={barWeight}\n              onChange={(e) => setBarWeight(e.target.value)}\n            >\n              <option value=\"45\" default>\n                45lbs\n              </option>\n              <option value=\"35\">35lbs</option>\n              <option value=\"25\">25lbs</option>\n              <option value=\"15\">15lbs</option>\n              <option value=\"10\">10lbs</option>\n              <option value=\"0\">0</option>\n              <option value=\"other\" disabled>\n                other\n              </option>\n            </select>\n          </div>\n        </Form>\n        <PlateInventory>\n          <h2>Plate Inventory:</h2>\n          <Plate\n            weight=\"45\"\n            inventory={plateInventory}\n            setPlateInventory={setPlateInventory}\n          />\n          <Plate\n            weight=\"35\"\n            inventory={plateInventory}\n            setPlateInventory={setPlateInventory}\n          />\n          <Plate\n            weight=\"25\"\n            inventory={plateInventory}\n            setPlateInventory={setPlateInventory}\n          />\n          <Plate\n            weight=\"10\"\n            inventory={plateInventory}\n            setPlateInventory={setPlateInventory}\n          />\n          <Plate\n            weight=\"5\"\n            inventory={plateInventory}\n            setPlateInventory={setPlateInventory}\n          />\n          <Plate\n            weight=\"2.5\"\n            inventory={plateInventory}\n            setPlateInventory={setPlateInventory}\n          />\n        </PlateInventory>\n        {results ? (\n          <>\n            <h3>Plates needed:</h3>\n            <button\n              type=\"button\"\n              onClick={clickCalculate}\n              disabled={!desiredWeight}\n            >\n              re-Calculate!\n            </button>\n            <div>\n              <p>Closest Weight: {results?.closestWeight}</p>\n              <ul>\n                {results?.plates.map((plate) => {\n                  return (\n                    <li key={plate.plateWeight}>\n                      {plate.plateWeight} - {plate.qty}\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n            {console.log(JSON.stringify(results))}\n          </>\n        ) : (\n          <button\n            type=\"button\"\n            onClick={clickCalculate}\n            disabled={!desiredWeight}\n          >\n            Calculate!\n          </button>\n        )}\n      </InnerContainer>\n    </AppContainer>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}